{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Alon\\\\My Documents\\\\Sela Documents\\\\Sela\\\\Self Learning\\\\JavaScript\\\\Udemy\\\\React\\\\ZeroToMastery\\\\gallery-app\\\\monsters-ex\\\\src\\\\App.js\";\n// import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\nimport { CardsHolder } from './components/cards-holder/cards-holder.component';\n\nclass App extends Component {\n  //ctor\n  constructor() {\n    super(); // the state  properties\n\n    this.state = {\n      myMonsters: [],\n      searchInput: ''\n    };\n  } // methods\n  //* gets the data from the API and puts it inside the state property\n\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(res => res.json()).then(resNames => this.setState({\n      myMonsters: resNames\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"search\",\n        placeholder: \"Enter Name\",\n        onChange: e => this.setState({\n          searchInput: e.target.value\n        },\n        /**\n        * setState can also receive two parameters. the second one being a callback to preform ⨽after⨼ the state has been reset\n        in this case a console log of the state now that it is updated\n        */\n        () => {\n          console.log(this.state);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardsHolder, {\n        monsters: this.state.myMonsters\n        /*name=\"First\"*/\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["D:/Alon/My Documents/Sela Documents/Sela/Self Learning/JavaScript/Udemy/React/ZeroToMastery/gallery-app/monsters-ex/src/App.js"],"names":["React","Component","CardsHolder","App","constructor","state","myMonsters","searchInput","componentDidMount","fetch","then","res","json","resNames","setState","render","e","target","value","console","log"],"mappings":";;AAAA;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,kDAA5B;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAE1B;AACAG,EAAAA,WAAW,GAAG;AACZ,YADY,CAEZ;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID,GAVyB,CAY1B;AACA;;;AACAC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,QAAQ,IAAI,KAAKC,QAAL,CAChB;AAAER,MAAAA,UAAU,EAAEO;AAAd,KADgB,CAFpB;AAKD;;AAEDE,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,WAAW,EAAC,YAAjC;AAA8C,QAAA,QAAQ,EAAEC,CAAC,IAAI,KAAKF,QAAL,CAAc;AAAEP,UAAAA,WAAW,EAAES,CAAC,CAACC,MAAF,CAASC;AAAxB,SAAd;AAA+C;AACpH;AACA;AACA;AACU,cAAM;AACJC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAjB;AACD,SAN0D;AAA7D;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAE,KAAKA,KAAL,CAAWC;AAAW;;AAA7C;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAxCyB;;AAyC3B;AAED,eAAeH,GAAf","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react'\nimport { CardsHolder } from './components/cards-holder/cards-holder.component'\n\nclass App extends Component {\n\n  //ctor\n  constructor() {\n    super();\n    // the state  properties\n    this.state = {\n      myMonsters: [],\n      searchInput: ''\n    }\n  }\n\n  // methods\n  //* gets the data from the API and puts it inside the state property\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(resNames => this.setState(\n        { myMonsters: resNames }\n      ));\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <input type='search' placeholder='Enter Name' onChange={e => this.setState({ searchInput: e.target.value }, /**\n         * setState can also receive two parameters. the second one being a callback to preform ⨽after⨼ the state has been reset\n         in this case a console log of the state now that it is updated\n         */\n          () => {\n            console.log(this.state);\n          }\n        )} />\n        <CardsHolder monsters={this.state.myMonsters}/*name=\"First\"*/>\n\n\n        </CardsHolder>\n      </div>\n    );\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}